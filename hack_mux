#!/usr/bin/env perl
use warnings;
use strict;
#
# A brainless h264 NAL to PES muxer
#

sub packet_01ba {
    return pack("C*", 0,0,1,0xba,0x47,0xea,0x9d,0xd4,0x94,1,0,0,0x0f,0xf8);
}

sub packet_01bb {
    return pack("C*",
        0,0,1,0xbb,0,9,0x80,0,1,0,0x21,0xff,0xe0,0xe1,0x90,
    );
}

sub packet_01bc {
    return pack("C*",
        0,0,1,0xbc,0,0xe,0xe1,0xff,0,0,0,4,0x1b,0xe0,0,0,0x53,0x12,0xf5,
        0x5c,
    );
}

sub pes_head_pts_dts {
    my $magic = shift;
    my $pts = shift;

    my @val;

    $val[0] |= ($magic & 0x0f) <<4;

    # marker bits
    $val[0] |= 1;
    $val[2] |= 1;
    $val[4] |= 1;

    $val[0] |= (($pts >>30) & 0x7) <<1;
    $val[1] |= (($pts >>22) & 0xff);
    $val[2] |= (($pts >>15) & 0x7f) <<1;
    $val[3] |= (($pts >>7) & 0xff);
    $val[4] |= (($pts) & 0x7f) <<1;

    return @val;
}

sub pes_head {
    my %params = (
        @_
    );
    my @val;

    my $tmp = 0;

    #val[0]:
    $tmp = 0;
    $tmp |= 0x80;
    # PES_scrambling_control
    # PES_priority
    # data_alignment_indicator
    # copyright
    # original_or_copy
    push @val, $tmp;

    if (defined($params{PTS}) && defined($params{PTS})) {
        $params{PTS_DTS_flags} = 3;
    } elsif (defined($params{PTS})) {
        $params{PTS_DTS_flags} = 2;
    } elsif (defined($params{DTS})) {
        ...
    } else {
        $params{PTS_DTS_flags} = 0;
    }

    #val[1]:
    $tmp = 0;
    $tmp |= ($params{PTS_DTS_flags} & 0x3) << 6;
    # ESCR_flag
    # ES_rate_flag
    # DSM_trick_mode_flag
    # additional_copy_info_flag
    # PES_CRC_flag
    # PES_extension_flag
    push @val, $tmp;

    #val[2]:
    push @val, 0; # header data length - to fill in later

    # the length of the header with no extensions
    my $basic_length = scalar(@val);

    # add any extensions
         if ($params{PTS_DTS_flags} == 0) {
    } elsif ($params{PTS_DTS_flags} == 2) {
        ...
    } elsif ($params{PTS_DTS_flags} == 3) {
        push @val, pes_head_pts_dts(3, $params{PTS});
        push @val, pes_head_pts_dts(1, $params{DTS});
    } else {
        ...
    }

    if ($params{ESCR_flag}) {
        ...
    }

    if ($params{ES_rate_flag}) {
        ...
    }

    if ($params{DSM_trick_mode_flag}) {
        ...
    }

    if ($params{additional_copy_info_flag}) {
        ...
    }

    if ($params{PES_CRC_flag}) {
        ...
    }

    if ($params{PES_extension_flag}) {
        ...
    }

    # now we know the header length, patch it back in
    $val[2] = scalar(@val) - $basic_length;

    return pack("C*", @val);
}

sub packet_01e0_head {
    my $buflen = shift;

    my @val = (
        0,0,1,0xe0,
    );

    push @val, ($buflen >>8) & 0xff;
    push @val, ($buflen) & 0xff;

    return pack("C*", @val);
}

sub packet_nal_09 {
    return pack("C*",
        0,0,0,1,9,0xe0,
    );
}

# replicating the vlc stream, I need to process random sized chunks
sub chunk_01e0 {
    my $packetlen = shift;
    my %params = (
        head => 1,
        @_
    );

    my $read_want = $packetlen;

    my $buf_pes_head = '';
    if ($params{head}) {
        $buf_pes_head = pes_head(%params);
    }

    my $buf_nal_09 = '';
    if (defined($params{nal_09})) {
       $buf_nal_09 = packet_nal_09();
    }

    # remove the sizes of any additional headers
    $read_want -= length($buf_pes_head);
    $read_want -= length($buf_nal_09);

    my $buf;
    my $read_got = sysread(STDIN,$buf,$read_want);
    if ($read_got != $read_want) {
        warn("read size mismatch");
        return undef;
    }

    my $result = packet_01e0_head($packetlen);
    $result .= $buf_pes_head;
    $result .= $buf_nal_09;
    $result .= $buf;
    return $result;
}

sub chunk {
    my $type = shift;
    my @params = @_;

    my %types = (
        '01ba' => \&packet_01ba,
        '01bb' => \&packet_01bb,
        '01bc' => \&packet_01bc,
        '01e0' => \&chunk_01e0,
    );

    my $fn = $types{$type};
    die('bad type') if (!defined($fn));

    return &{$fn}(@params);
}

sub main() {
    my @order = (
        ['01ba', SCR=>1051310738, mux_rate=>3],
        ['01bb'],
        ['01bc'],
        ['01e0', 0xffe9, DTS=>1051328738, PTS=>1051328738, nal_09=>1],
        ['01e0', 0x4e58],
        ['01e0', 0xffe9, DTS=>1051332338, PTS=>1051332338, nal_09=>1],
        ['01e0', 0x36d2],
        ['01e0', 0x5f44, DTS=>1051335938, PTS=>1051335938, nal_09=>1],
        ['01e0', 0xffe9, DTS=>1051339538, PTS=>1051339538, nal_09=>1],
        ['01e0', 0x5994],
        ['01e0', 0x4512, DTS=>1051336886, PTS=>1051336886, nal_09=>1],
        ['01e0', 0xffe9, DTS=>1051340486, PTS=>1051340486, nal_09=>1],
        ['01e0', 0x413a],
        ['01e0', 0x3d63, DTS=>1051344086, PTS=>1051344086, nal_09=>1],
        ['01e0', 0xffe9, DTS=>1051347686, PTS=>1051347686, nal_09=>1],
        ['01e0', 0x2696],
        ['01e0', 0x36c1, DTS=>1051351286, PTS=>1051351286, nal_09=>1],
        ['01e0', 0xf8c9, DTS=>1051354886, PTS=>1051354886, nal_09=>1],
        ['01e0', 0x6c6b, DTS=>1051358486, PTS=>1051358486, nal_09=>1],
        ['01e0', 0xd851, DTS=>1051362086, PTS=>1051362086, nal_09=>1],
        ['01e0', 0xbf32, DTS=>1051365686, PTS=>1051365686, nal_09=>1],
        ['01e0', 0x7cf3, DTS=>1051369286, PTS=>1051369286, nal_09=>1],
        ['01e0', 0x6695, DTS=>1051372886, PTS=>1051372886, nal_09=>1],
        ['01e0', 0x694f, DTS=>1051376486, PTS=>1051376486, nal_09=>1],
        ['01e0', 0x60ea, DTS=>1051380086, PTS=>1051380086, nal_09=>1],
        ['01e0', 0x61a4, DTS=>1051383686, PTS=>1051383686, nal_09=>1],
        ['01e0', 0x5fcf, DTS=>1051387286, PTS=>1051387286, nal_09=>1],
        ['01e0', 0x5d9c, DTS=>1051390886, PTS=>1051390886, nal_09=>1],
        ['01e0', 0x5ae0, DTS=>1051394486, PTS=>1051394486, nal_09=>1],
        ['01e0', 0x5b0c, DTS=>1051398086, PTS=>1051398086, nal_09=>1],
        ['01e0', 0x59b5, DTS=>1051401686, PTS=>1051401686, nal_09=>1],
        ['01e0', 0x5976, DTS=>1051405286, PTS=>1051405286, nal_09=>1],
        ['01e0', 0x58b6, DTS=>1051408886, PTS=>1051408886, nal_09=>1],
        ['01e0', 0x5870, DTS=>1051412486, PTS=>1051412486, nal_09=>1],
        ['01e0', 0x56e0, DTS=>1051416086, PTS=>1051416086, nal_09=>1],
        ['01e0', 0x58af, DTS=>1051419686, PTS=>1051419686, nal_09=>1],
        ['01e0', 0x5843, DTS=>1051423286, PTS=>1051423286, nal_09=>1],
        ['01e0', 0x5821, DTS=>1051426886, PTS=>1051426886, nal_09=>1],
    );

    # follow the given pattern while we can
    for my $params (@order) {
        print(chunk(@{$params}));
    }

    # then just fill the file
    my $chunk = chunk_01e0(0xf000);
    while (defined($chunk)) {
        print($chunk);
        $chunk = chunk_01e0(0xf000);
    }
}
unless (caller) {
    main();
}
