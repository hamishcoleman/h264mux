#!/usr/bin/env perl
use warnings;
use strict;
#
# Read h264 stream and embed it in a mp4 container
#

# FIXME - calculate these values from the h264 stream
my $m_duration_secs = 59.766069;
my $m_size_bytes = 37525873;
my $m_fps = 30; # This probably needs to be on the cmdline - TODO ?!?
                # (it looks like the packet_27 SPS generated by the rpi
                # doesnt have any timing_info_present, so we cannot get that
                # from the incoming stream :-(

# Some static values for this encoder
my $mvhd_timescale = 90000;     # set in mvhd, used in tkhd
my $mdhd_timescale = 1000000;   # set in mdhd, used in stts
my $stts_sample_delta = $mdhd_timescale/$m_fps;  # set in stts
my $samples = ($m_duration_secs * $mdhd_timescale / $stts_sample_delta)+1;
                                # used in stts, stsc, stsz

use File::Spec;

# allow the libs to be in the bin dir
use FindBin;
use lib File::Spec->catdir($FindBin::RealBin,"lib");
use lib File::Spec->catdir($ENV{HOME},"s/bin/lib");

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use MPEG::NAL;



sub packet_generic {
    my $type = shift;
    my @contents = @_;

    my $length;
    for my $fragment (@contents) {
        $length += length($fragment);
    }

    # add in size and type header
    $length += 4 + 4;

    my $length_buf = pack('N',$length);

    die("bad type len") if (length($type) != 4);

    return ($length_buf,$type,@contents);
}

sub packet_ftyp {
    my $buf = pack('a4N(a4)2',
        'isom', # major_brand
        0,      # minor_version
        'mp41', 'avc1'
    );

    return packet_generic('ftyp',$buf);
}

sub packet_padb {
    my $size = shift;
    my $buf = "\000"x$size;
    return packet_generic('padb',$buf);
}

sub packet_mvhd {
    my $buf = pack('NNNNNNnnN2N9N6N',
        0,      # version
        0,      # ctime
        0,      # mtime
        $mvhd_timescale, # timescale (played with this set to 1)
        $m_duration_secs * $mvhd_timescale, # duration (plays when set to 0)
        0x10000, # rate
        0x100,  # volume
        0,0,0,  # reserved
        0x10000,0,0,0,0x10000,0,0,0,0x40000000, # matrix
        0,0,0,0,0,0,    # pre_defined ??
        2,      # next_track_ID
    );
    return packet_generic('mvhd',$buf);
}

sub packet_mdhd {
    my $buf = pack('NNNNNnn',
        0,      # version
        0,      # ctime
        0,      # mtime
        $mdhd_timescale, # timescale
        $m_duration_secs * $mdhd_timescale, # duration (plays when set to 0)
        0,      # lang (actually 1bit pad, 3* 5bit char)
        0,      # pre_defined
    );
    return packet_generic('mdhd',$buf);
}

sub packet_tkhd {
    my $buf = pack('CC3NNNNNN2nnnnN9NN',
        0,      # version
        0,0,1,  # flags 0x1==track_enabled
        0,      # ctime
        0,      # mtime
        1,      # track_ID
        0,      # reserved
        $m_duration_secs * $mvhd_timescale, # duration
        0,0,    # reserved
        0,      # layer
        0,      # alternate_group
        0,      # volume
        0,      # reserved
        0x10000,0,0,0,0x10000,0,0,0,0x40000000, # matrix
        0x5000000, # width - TODO calculate these two
        0x2d00000, # height (both abstract units, used for aspect ratio)
    );
    return packet_generic('tkhd',$buf);
}

sub packet_avcC {
    my $unk = pack('C*',
        # all unknown
        1,0x4d,0x40,0x1e,0xff,0xe0,0
    );
    return packet_generic('avcC',$unk);
}

sub packet_stts {
    my $buf = pack('NNNN',
        0,      # version
        1,      # entry_count
        $samples, # sample_count[0]
        $stts_sample_delta, # sample_delta0 (interval between samples)
    );
    return packet_generic('stts',$buf);
}

sub packet_stsc {
    # Sample to chunk list
    my $buf = pack('NNNNN',
        0,      # version
        1,      # entry_count
        1,      # first_chunk[0]
        $samples, # samples_per_chunk[0]
        1,      # sample_description_index[0]
    );
    return packet_generic('stsc',$buf);
}

sub packet_stsz {
    my $buf = pack('NNNN*',
        0,      # version
        0,      # sample_size
        $samples, # sample_count
    # TODO - calculate these
    # - each entry is the offset in the mdat to the next 'sample'
    # - it looks like samples are - for all intents - 'frames
  85547, 79525, 24369, 88423, 17663, 82189, 15696, 75369, 13998, 63670,
  27736, 55358, 48927, 31968, 26242, 26940, 24791, 24977, 24508, 23945,
  23245, 23289, 22946, 22883, 22691, 22621, 22221, 22684, 22576, 22542,
  22820, 22580, 22364, 22507, 22310, 22433, 22465, 22458, 22509, 22287,
  22112, 22186, 22229, 22431, 22796, 22607, 22585, 22345, 22454, 22096,
  22016, 21915, 21597, 21823, 21874, 21636, 21433, 21546, 21861, 21575,
  99022, 26462, 24199, 23119, 22389, 22231, 22317, 22389, 22304, 22422,
  22392, 22198, 22622, 22704, 22630, 22796, 22646, 22800, 22868, 22491,
  22237, 22151, 22250, 21963, 22054, 22037, 21949, 22369, 22606, 22588,
  23062, 22546, 23002, 23181, 22804, 22769, 22948, 23292, 23118, 23129,
  22968, 22984, 23070, 22879, 23008, 22646, 22863, 22680, 22587, 22528,
  22569, 22288, 22789, 23013, 22658, 22207, 22007, 22517, 22443, 22380,
  99054, 27023, 24329, 23130, 22853, 22666, 22280, 22610, 22276, 22063,
  22092, 22055, 22610, 22875, 22647, 22451, 22159, 22377, 23010, 23043,
  22405, 22371, 22477, 22357, 22591, 22144, 21751, 21819, 22017, 21877,
  21981, 21866, 22109, 21874, 21505, 21498, 21983, 21469, 21267, 21277,
  21164, 21217, 21762, 21396, 21618, 21989, 21805, 21945, 21948, 21854,
  21977, 21670, 22018, 22036, 21641, 21401, 21400, 21625, 21378, 21476,
  98467, 25750, 22794, 21537, 20958, 20785, 20573, 20452, 20483, 20307,
  20154, 19973, 20745, 20588, 20360, 20706, 20376, 20415, 20938, 20902,
  20802, 20728, 20795, 20520, 20764, 20542, 20628, 20799, 21090, 21014,
  21840, 21518, 21180, 21299, 21298, 20997, 21252, 21029, 21110, 21059,
  20825, 20928, 21550, 21192, 21043, 21071, 20918, 20997, 21772, 21490,
  21244, 21076, 21272, 21381, 21161, 21123, 21118, 20942, 20818, 20654,
  97030, 25277, 22780, 21693, 21112, 20769, 20504, 20638, 20399, 20314,
  20148, 20115, 20342, 20331, 20290, 20145, 20178, 20590, 20460, 20526,
  20655, 20602, 20387, 20732, 20911, 20578, 20825, 20879, 21081, 20956,
  20781, 20649, 20806, 20806, 20573, 20346, 20463, 20484, 20554, 20816,
  20722, 20706, 21495, 21175, 21167, 20960, 21015, 21038, 21381, 21073,
  20929, 20586, 20607, 21066, 20811, 20682, 20544, 20802, 20521, 20722,
  96917, 25288, 22848, 21939, 21539, 21075, 21504, 21426, 21154, 21059,
  21183, 21123, 21377, 20964, 21243, 20654, 21037, 20750, 20942, 20858,
  20765, 20839, 20700, 20742, 21124, 20927, 20768, 20838, 20647, 20462,
  20818, 20446, 20744, 20646, 20596, 20459, 20666, 20513, 20758, 20702,
  20934, 20823, 21621, 21270, 21094, 21089, 20979, 20921, 20997, 20879,
  20745, 21054, 21055, 21539, 21261, 21006, 21122, 21496, 21528, 21308,
  97172, 25710, 23088, 22368, 21499, 21422, 21383, 21575, 21286, 21333,
  21173, 21146, 21497, 21248, 21209, 21259, 21170, 21562, 21094, 21565,
  21430, 21411, 23668, 21719, 22230, 21703, 21535, 21432, 21354, 21490,
  21757, 21354, 21366, 21479, 21270, 21078, 20920, 21134, 21035, 21251,
  20807, 20804, 21342, 21266, 21223, 21046, 20980, 21169, 21264, 21263,
  21344, 21492, 21844, 21863, 21662, 21732, 21458, 21852, 21610, 21446,
  97281, 26110, 23536, 22251, 21653, 21383, 21742, 21259, 20817, 20609,
  20632, 20639, 20786, 20825, 20588, 20616, 20752, 20808, 21174, 20931,
  20814, 20877, 20982, 21020, 20950, 20534, 20337, 20564, 20619, 20745,
  20800, 20899, 20864, 20846, 21039, 20788, 20956, 21110, 21091, 20832,
  20803, 20564, 20665, 20936, 20698, 20410, 20596, 20758, 20919, 20678,
  20992, 20922, 21191, 21119, 21287, 21132, 21107, 21221, 21137, 21115,
  97518, 26163, 23742, 22644, 22192, 21801, 22061, 21426, 21202, 20940,
  21079, 21169, 21081, 21229, 21359, 21357, 21270, 21428, 21756, 21810,
  21419, 21283, 21525, 21629, 21413, 21388, 21451, 21381, 21448, 21599,
  21576, 21048, 21772, 21858, 21606, 21510, 21802, 21521, 21618, 21346,
  21529, 21411, 21413, 21492, 21493, 21377, 21566, 21576, 21546, 21402,
  21334, 21244, 21182, 20985, 20831, 20875, 20637, 20933, 21002, 20816,
  97585, 25655, 22843, 21563, 20963, 20452, 20568, 20741, 20637, 20685,
  20392, 20357, 20293, 20385, 20001, 19815, 19989, 19827, 19943, 19586,
  19540, 19321, 19666, 19618, 19434, 19125, 19037, 19291, 18957, 18688,
  18953, 18917, 19296, 19363, 19424, 19392, 18934, 19482, 19221, 19362,
  19447, 19334, 19495, 19182, 19218, 19396, 19674, 19486, 19748, 19579,
  19435, 19212, 19280, 19208, 19491, 19071, 19261, 19420, 19509, 19538,
  97212, 24555, 21815, 20592, 20049, 19843, 19808, 20215, 20063, 19923,
  19687, 19625, 20091, 20172, 20473, 19518, 19483, 19419, 19607, 19711,
  19434, 19443, 19657, 19429, 19263, 19133, 18958, 19422, 19492, 19449,
  19431, 19538, 19774, 19698, 19885, 19829, 19803, 19948, 20144, 19883,
  19951, 20029, 20396, 20289, 20034, 19950, 19829, 20484, 20155, 19909,
  19737, 19540, 19643, 19669, 19840, 19658, 19537, 20025, 19616, 19523,
  96963, 24436, 21535, 20350, 20000, 19644, 19464, 19580, 19509, 19489,
  19323, 19100, 19550, 19548, 19745, 19478, 19522, 19835, 20102, 19998,
  19508, 19677, 19466, 19643, 19312, 19540, 19403, 19393, 19600, 19525,
  19548, 19355, 19602, 19434, 19681, 19578, 19737, 19687, 19642, 19592,
  19347, 19570, 21088, 21309, 20463, 19892, 19917, 20466, 21081, 20894,
  20647, 20292, 20252, 20069, 20417, 20322, 20323, 20299, 20212, 20175,
  96792, 25158, 22151, 21045, 20565, 20022, 20242, 20273, 20229, 20131,
  20195, 19754, 19698, 19569, 19266, 19178, 19181, 19421, 19191, 18884,
  19011, 18860, 19206, 19103, 18997, 19053, 19129, 19322, 19559, 19619,
  19146, 19261, 19475, 19516, 19573, 19045, 19288, 19258, 19260, 18909,
  18872, 19073, 20077, 19443, 19452, 19284, 19206, 19170, 19595, 19502,
  19207, 19015, 19260, 19051, 18964, 18927, 18954, 19173, 19368, 19549,
  95367, 23713, 21300, 20277, 19574, 19287, 19239, 19446, 19261, 19040,
  18839, 18823, 19014, 19021, 18716, 18538, 18727, 18907, 19043, 19078,
  18742, 18848, 18750, 19062, 19451, 19046, 18743, 18723, 18581, 18588,
  19048, 18423, 18703, 18564, 18652, 18378, 18689, 18696, 18595, 18792,
  18729, 18835, 18922, 18791, 18795, 18566, 18489, 18643, 18821, 18186,
  18525, 18336, 18357, 18674, 18635, 18441, 18625, 18673, 18789, 18325,
  94882, 23269, 20744, 19776, 19150, 18783, 18715, 19160, 18850, 18648,
  18437, 18336, 18932, 18757, 18596, 18301, 18338, 18214, 18609, 18531,
  18440, 18270, 18731, 18593, 18643, 18291, 18456, 18613, 18694, 18623,
  18695, 18805, 18746, 18809, 18814, 18743, 18672, 18682, 18760, 18817,
  18780, 18618, 19307, 19144, 18684, 18549, 18472, 18711, 18994, 19027,
  18813, 18598, 18790, 18566, 18532, 18853, 18336, 18726, 18650, 18503,
  95066, 23553, 20661, 19733, 18937, 18844, 18817, 18675, 18602, 18477,
  18349, 18396, 19205, 18594, 18562, 18302, 18281, 18458, 18872, 18424,
  18254, 18208, 18391, 18534, 19000, 18757, 18571, 18912, 18685, 18951,
  18468, 18540, 18765, 18676, 18510, 18391, 18249, 18561, 18530, 18523,
  18464, 18640, 18928, 18747, 18569, 18329, 18330, 18235, 18364, 18279,
  18385, 18331, 18698, 18902, 18847, 18647, 18913, 19055, 19034, 19074,
  95357, 23527, 20809, 19796, 19205, 18999, 18870, 19817, 19289, 18848,
  18753, 18444, 18659, 18514, 18382, 18071, 18184, 18244, 18734, 18407,
  18200, 18070, 18325, 18479, 18321, 18360, 18391, 18403, 18580, 18277,
  18111, 18251, 18332, 18417, 18323, 18180, 18213, 18125, 18067, 18000,
  17825, 17947, 18297, 18257, 18134, 18412, 18152, 18227, 18230, 18241,
  18262, 18234, 18470, 18332, 18249, 18328, 17940, 18457, 18391, 17933,
  95105, 22973, 19978, 19076, 18416, 18030, 17972, 18042, 18037, 18003,
  17775, 18029, 17927, 18047, 17650, 17919, 17756, 18118, 18433, 18190,
  17926, 18073, 18194, 18299, 18441, 18131, 18210, 18058, 18047, 17915,
  18268, 17997, 18041, 18243, 18252, 17976, 18100, 18262, 18179, 17868,
  17771, 17814, 18329, 18126, 18055, 18095, 18136, 18325, 18944, 18533,
  17926, 17953, 17831, 17950, 17893, 17783, 17763, 18393, 18467, 18054,
  94805, 22620, 20049, 19124, 18439, 18153, 17965, 18606, 18216, 17648,
  17713, 17585, 17836, 17791, 17576, 17353, 17133, 17370, 17388, 17270,
  17308, 17380, 17596, 17530, 17266, 17338, 17064, 17368, 17516, 17465,
  17586, 17729, 18219, 17968, 17720, 17467, 17250, 17529, 17825, 17829,
  17370, 17366, 17449, 17484, 17270, 17345, 17048, 17608, 17462, 17759,
  17832, 17369, 17521, 17709, 17334, 17460, 16850, 17532, 17744, 17387,
  95417, 22576, 19972, 18683, 17985, 17561, 17043, 17778, 17469, 17179,
  17279, 16953, 17461, 17527, 17205, 17295, 17028, 17371, 17110, 17355,
  17131, 16962, 17207, 17297, 17390, 17355, 16864, 16819, 16985, 17058,
  17180, 17009, 17060, 17169, 17142, 17149, 17072, 17040, 17343, 16992,
  17182, 17054, 17231, 17076, 17167, 17041, 16920, 17306, 17746, 17471,
  17078, 17043, 17482, 17401, 17140, 17132, 16981, 17489, 17182, 17135,
  95655, 22150, 19322, 18308, 17570, 17454, 17302, 17372, 17430, 17187,
  16955, 17157, 17651, 17287, 17367, 16996, 17057, 17038, 17230, 17204,
  16947, 17041, 17264, 17286, 16853, 17168, 17037, 17010, 16858, 17178,
  17233, 17016, 17332, 17382, 17241, 17273, 17311, 17408, 17351, 17272,
  17108, 17151, 17531, 17339, 17338, 17365, 17274, 17732, 17569, 17532,
  17613, 17397, 17733, 17614, 17523, 17558, 17700, 18029, 17823, 17786,
  95489, 22752, 19792, 18827, 18487, 18075, 17841, 18208, 18008, 17680,
  17658, 17576, 18351, 17827, 17787, 17912, 17596, 18029, 18636, 18011,
  17803, 17592, 17808, 17797, 18111, 17710, 17559, 17883, 17836, 17734,
  17991, 17749, 18094, 18048, 18019, 18094, 18222, 17955, 18110, 17962,
  17983, 18021, 18314, 18341, 18204, 18175, 18140, 18420, 18700, 18747,
  18473, 18414, 18195, 18517, 18501, 18324, 18194, 18512, 18454, 18489,
  96051, 23056, 20543, 19312, 19092, 18797, 18430, 18413, 18424, 18162,
  18120, 18250, 18305, 18585, 18428, 18487, 18100, 18428, 18327, 18358,
  18245, 18432, 18443, 18412, 18800, 18354, 18157, 18487, 18233, 18161,
  18567, 18799, 18689, 18711, 18526, 18451, 18246, 18935, 18845, 18676,
  18396, 18193, 18730, 18463, 18189, 18005, 18110, 18600, 18236, 18244,
  18394, 18352, 18324, 18301, 18451, 18438, 18080, 18636, 18460, 18151,
  96114, 23077, 20199, 19329, 18847, 18442, 18419, 18364, 18201, 18108,
  17856, 17827, 17901, 17964, 17758, 17441, 17483, 17686, 17844, 17594,
  17614, 17543, 17730, 17867, 17982, 17859, 17972, 18108, 17816, 17964,
  18160, 17913, 18139, 18190, 17947, 17886, 17684, 17780, 17819, 17537,
  17419, 17664, 18044, 17800, 17562, 17742, 17315, 17606, 18064, 17660,
  17525, 17801, 17762, 17963, 17821, 17734, 17844, 17766, 17752, 17749,
  96226, 22958, 19805, 18829, 18500, 18297, 18328, 18369, 18097, 17891,
  17681, 17704, 18454, 18756, 18079, 17989, 17985, 18216, 18502, 18195,
  18351, 18200, 18311, 18420, 18831, 18536, 18691, 18571, 18517, 18500,
  18675, 18531, 19048, 18961, 18679, 18656, 18778, 19576, 18792, 18971,
  18564, 18496, 18908, 18643, 18782, 18822, 18761, 18694, 19009, 19203,
  18845, 18875, 19103, 18897, 19542, 19264, 19197, 19299, 19335, 19344,
  96463, 24140, 21170, 20103, 19606, 19111, 19027, 19055, 19278, 19013,
  18908, 18698, 18897, 19212, 19053, 18809, 18845, 19197, 18979, 18981,
  18851, 18675, 19056, 18895, 19375, 18874, 18614, 18645, 19053, 18961,
  18916, 18963, 19002, 18994, 18844, 18713, 18850, 19109, 18990, 18821,
  18596, 18444, 18852, 19184, 18565, 18481, 18205, 18320, 18361, 18516,
  18266, 18191, 18533, 18580, 18185, 18302, 18189, 18892, 18696, 18743,
  95956, 23493, 20663, 19397, 18955, 18672, 18725, 18940, 18493, 18416,
  18434, 18431, 18643, 18234, 18047, 17929, 17897, 18249, 18458, 18285,
  17899, 17918, 17790, 17782, 18425, 18361, 17840, 18027, 18135, 18007,
  18132, 18375, 18306, 18197, 18065, 17747, 17794, 17939, 17959, 17834,
  17767, 17820, 18240, 18199, 17907, 18056, 17846, 18179, 18453, 18042,
  17719, 17900, 18164, 18204, 18589, 18101, 18101, 18246, 18152, 18211,
  95985, 22989, 20258, 19133, 18629, 18176, 18374, 17790, 18182, 17862,
  17799, 17655, 17958, 17660, 17596, 17576, 17378, 17656, 17567, 17689,
  17648, 17622, 17845, 17829, 17787, 17719, 17491, 17620, 17576, 17676,
  17757, 17853, 17682, 17476, 17367, 17438, 17375, 17926, 17617, 17852,
  17865, 17528, 17424, 17437, 17400, 17187, 17443, 17353, 17553, 17662,
  17281, 17173, 17397, 17560, 17467, 17114, 17305, 17224, 17401, 17218,
  96084, 22649, 19483, 18489, 17747, 17641, 17376, 17565, 17451, 17092,
  17150, 16974, 17657, 17133, 17218, 17197, 17100, 17178, 17314, 17221,
  17087, 17045, 17177, 17248, 17353, 17099, 16923, 17139, 17291, 17215,
  17263, 17158, 17352, 17222, 17235, 17057, 17223, 17352, 17276, 17229,
  17120, 17262, 17310, 17186, 17164, 16869, 17274, 17385, 17437, 17428,
  17304, 17455, 17631, 17669, 18198, 17662, 17676, 17770, 17833, 17608,
  96507, 22795, 19858, 18591, 17993, 17578, 17994, 17729, 17711, 17370,
  17516, 17292, 17589, 17758, 17676, 17531, 17559, 17796, 18244, 17962,
  17842, 17680, 17851, 17831, 18239, 18063, 18055, 18199, 18275, 18175,
  17849, 18130, 18720, 18279, 17977, 17917, 17705, 17531, 17705, 17793,
  17630, 17551, 18097, 18208, 17892, 17847, 17882, 17929, 18106, 17960,
  17853, 17782, 17807,
    );
    return packet_generic('stsz',$buf);
}

sub packet_stco {
    my $buf = pack('NNN',
        0,      # version
        1,      # entry_count
        0x1f05+8,       # chunk_offset[0] - FIXME, needs to be calculated
    );
    return packet_generic('stco',$buf);
}

sub print_packet_mdat {
    my $length = $m_size_bytes; # size of my sample stream
    my $head = pack('Na4',
        $length +4 +4,
        'mdat'
    );
    print($head);

    my $stream = MPEG::NAL->new();
    $stream->open($ARGV[0]);
    #$ps->resync();

    # TODO:
    # each sample in stsz is the length of a group of packet_27,28,25
    # or a packet_21.
    # the sample pointer points at the inserted packet_27, the packet_25 is
    # still present in the stream, but no sample points at it.
    my $packet_25_seen = 0;
    my $packet_27;
    my $packet_27_seen = 0;
    my $packet_28;
    my $packet_28_seen = 0;

    my $got_length=0;
    while(1) {
        # skip the header
        $stream->read_bytes(4);

        my $buf = $stream->resync();
        last if (!defined($buf));

        my $packet_len = length($buf);
        last if ($packet_len == 0);

        my $type = unpack('C',$buf);

        my $packet_len_enc = pack('N',$packet_len);
        $buf = $packet_len_enc.$buf;

        # FIXME - types are only part of this field
        if ($type == 0x27) {
            $packet_27 = $buf;
            $packet_27_seen++;
        }
        if ($type == 0x28) {
            $packet_28 = $buf;
            $packet_28_seen++;
        }

        # TODO
        # - could avoid this dance if the raspivid command is using "-ih"
        if ($type == 0x25) {
            $packet_25_seen++;
            if ($packet_25_seen>$packet_28_seen) {
                $buf = $packet_28 . $buf;
            }
            if ($packet_25_seen>$packet_27_seen) {
                $buf = $packet_27 . $buf;
            }
        }

        $got_length += length($buf);
        print($buf);

        # if we have exactly how much we are hardcoded to expect, stop
        if ($got_length == $length) {
            last;
        }
    }

    die("length got $got_length want $length") if ($length != $got_length);
    return;
}

sub container_avc1 {
    my $buf = pack('CCCCCCn',
        0,0,0,0,0,0,    # reserved
        1,      # data_reference_index
    );
    my $unk = pack('C*',
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        5,0,2,0xd0,0,0x48,0,0,0,0x48,0,0,0,0,0,0,
        0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0x18,0xff,0xff,
    );
    return packet_generic('avc1',$buf,$unk,@_);
}

sub container_stsd {
    my $buf = pack('NN',
        0,      # version
        1,      # entry_count - TODO, this should be calculated from contents
    );
    return packet_generic('stsd',$buf,@_);
}

# Containers with no special variables
sub container_mdia { return packet_generic('mdia',@_); }
sub container_minf { return packet_generic('minf',@_); }
sub container_moov { return packet_generic('moov',@_); }
sub container_stbl { return packet_generic('stbl',@_); }
sub container_trak { return packet_generic('trak',@_); }

sub main() {
    print(packet_ftyp());
    print(container_moov(
        packet_mvhd(),
        container_trak(
            packet_tkhd(),
            packet_padb(0x1c), # in place of edts
            container_mdia(
                packet_mdhd(),
                packet_padb(0x25), # in place of hdlr
                container_minf(
                    packet_padb(0x0c), # in place of vmhd
                    packet_padb(0x1c), # in place of dinf
                    container_stbl(
                        container_stsd(
                            container_avc1(
                                packet_avcC(),
                            ),
                        ),
                        packet_stts(),
                        packet_padb(0x44), # in place of stss
                        packet_stsc(),
                        packet_stsz(),
                        packet_stco(),
                    ),
                ),
            ),
        ),
        packet_padb(0x23), # in place of udta
    ));
    print(packet_padb(0)); # in place of wide
    print_packet_mdat();
}
unless (caller) {
    main();
}


