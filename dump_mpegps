#!/usr/bin/env perl
use warnings;
use strict;
#
# Given an MPEG2 Program Stream, dump its content structure
#

package MPEG::PS::header_base;
use warnings;
use strict;

sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;
    return $self;
}

sub offset {
    my $self = shift;
    my $val = shift;
    if (defined($val)) {
        if (defined($self->{offset})) {
            die("can only set offset once");
        }
        $self->{offset} = $val;
    }
    return $self->{offset};
}

sub length_variable {
    my $self = shift;
    my $val = shift;
    if (defined($val)) {
        $self->{length_variable} = $val;
    }
    return $self->{length_variable};
}

sub length {
    my $self = shift;
    my $length_fixed = $self->length_fixed();
    my $length_variable = $self->length_variable() || 0;
    return $length_fixed + $length_variable;
}

sub read {
    my $self = shift;
    my $fh = shift;

    $self->offset($fh->tell());

    my $buf;
    my $count = $fh->read($buf,$self->length_fixed());
    if ($count != $self->length_fixed()) {
        die("read size mismatch");
    }

    $self->{val} = $buf;
    return $self;
}

sub to_string {
    my $self = shift;

    my $s = '';

    my $offset = $self->offset();
    if (defined($offset)) {
        $s .= sprintf("0x%08x",$offset);
    }

    $s .= sprintf("(0x%08x) ",$self->length());
    $s .= ref($self);

    return $s;
}

1;

package MPEG::PS::header_unknown;
# a header with a 16bit length field
use warnings;
use strict;

our @ISA = qw(MPEG::PS::header_base);

sub length_fixed { 0; }
1;

package MPEG::PS::header_len16;
# a header with a 16bit length field
use warnings;
use strict;

our @ISA = qw(MPEG::PS::header_base);

sub length_fixed { 6; }

sub read {
    my $self = shift;
    my $fh = shift;

    $self->SUPER::read($fh);

    my @val = unpack('Nn',$self->{val});

    die("bad magic") if ($val[0] != $self->sync_value());

    my $h= {};
    $self->length_variable($val[1]);

    my $buf;
    my $count = $fh->read($buf,$self->length_variable());
    if ($count != $self->length_variable()) {
        die("read size mismatch");
    }

    @val = unpack('C*',$buf);

    # TODO - where to decode this header?
    @{$h->{_data}} = @val;

    $self->{val} = $h;

    return $self;
}

1;

package MPEG::PS::header_01ba;
# a Program Stream pack header
use warnings;
use strict;

our @ISA = qw(MPEG::PS::header_base);

sub sync_value { 0x1ba; }
sub length_fixed { 14; }

sub read {
    my $self = shift;
    my $fh = shift;

    $self->SUPER::read($fh);

    my @val = unpack('NC*',$self->{val});

    # MPEG1 has different marker here - and different header structure
    die("bad magic") if ($val[0] != $self->sync_value());

    # check all the magic values at once
    die("bad marker") if ((($val[1] >>6) & 0x3) != 1);
    die("bad marker") if ((($val[1] >>2) & 0x1) != 1);
    die("bad marker") if ((($val[3] >>2) & 0x1) != 1);
    die("bad marker") if ((($val[5] >>2) & 0x1) != 1);
    die("bad marker") if (($val[6] & 0x1) != 1);
    die("bad marker") if (($val[9] & 0x3) != 3);

    my $h= {};
    $h->{scr} =
        (($val[1] >>3) & 0x7) << 30 |
        (($val[1] ) & 0x3) << 28 |
        (($val[2] )) << 20 |
        (($val[3] >>3) & 0x1f) << 15 |
        (($val[3] ) & 0x3) << 13 |
        (($val[4] )) << 5 |
        (($val[5] >>3) & 0x1f);
    $h->{scr_ext} =
        (($val[5] ) & 0x3) << 7 |
        (($val[6] >>1));
    $h->{bitrate} =
        (($val[7] )) <<15 |
        (($val[8] )) <<6 |
        (($val[9] >>2));
    # TODO - check the reserved bytes?
    $self->length_variable((($val[10]) & 0x7));

    my $buf;
    my $count = $fh->read($buf,$self->length_variable());
    if ($count != $self->length_variable()) {
        die("read size mismatch");
    }
    $h->{stuff_bytes} = $buf;

    $self->{val} = $h;

    return $self;
}

sub to_string {
    my $self = shift;

    my $s = $self->SUPER::to_string();
    $s .= sprintf(" scr=%i", $self->{val}{scr});
    return $s;
}

1;

package MPEG::PS::header_01bb;
# a system header
use warnings;
use strict;

our @ISA = qw(MPEG::PS::header_len16);

sub sync_value { 0x1bb; }

1;

package MPEG::PS::header_01bc;
# a system header
use warnings;
use strict;

our @ISA = qw(MPEG::PS::header_len16);

sub sync_value { 0x1bc; }

1;

package MPEG::PS;
use warnings;
use strict;

use IO::File;

sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;
    return $self;
}

sub open {
    my $self = shift;
    my $filename = shift;
    my $fh = IO::File->new($filename,"r");
    if (!defined($fh)) {
        die("Could not open $filename: $!");
    }
    $self->{_fh} = $fh;
    return $self;
}

# peek at the next dword, which might be a valid sync header
sub peek_sync {
    my $self = shift;
    my $sync_size = 4;

    my $buf;
    my $count = $self->{_fh}->read($buf,$sync_size);
    if ($count != $sync_size) {
        die("read size mismatch");
    }

    # rewind back over the sync byte
    $self->{_fh}->seek(-$sync_size,1);
    return unpack("N",$buf);
}

# a very simple sync byte search
sub resync {
    my $self = shift;
    my $sync_value = 0x1ba;

    while(!$self->{_fh}->eof()) {
        my $dword = $self->peek_sync();
        if ($dword == $sync_value) {
            return $self;
        }

        # skip to the next possible position
        $self->{_fh}->seek(1,1);
    }
}

sub read_header {
    my $self = shift;

    my $headers = {
        0x1ba => 'MPEG::PS::header_01ba',
        0x1bb => 'MPEG::PS::header_01bb',
        0x1bc => 'MPEG::PS::header_01bc',
    };

    my $dword = $self->peek_sync();

    if (defined($headers->{$dword})) {
        my $header = $headers->{$dword}->new();
        $self->{headers}{$dword} = $header->read($self->{_fh});
        return $self->{headers}{$dword};
    }

    my $header = MPEG::PS::header_unknown->new();
    $self->{headers}{$dword} = $header->read($self->{_fh});
    printf("%s Unknown header 0x%08x\n", $header->to_string(), $dword);
    return undef;
}


1;

package main;
use warnings;
use strict;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub main {
    my $ps = MPEG::PS->new();
    $ps->open($ARGV[0]);

    $ps->resync();

    while (my $header = $ps->read_header()) {
        printf("%s\n",$header->to_string());
    }

    print Dumper($ps);
}
unless (caller) {
    main();
}
